
																				-- Every query Behind DashBoard Creation for  Validation

-- Total Revenue
select format(sum(revenue_realized),0) as Total_Revenue from hostel_rooms.fact_bookings

-- Average Rating
select format(avg(ratings_given),2) as Average_Rating from hostel_rooms.fact_bookings

-- remove duplicates in our dataset
select distinct * from hostel_rooms.fact_aggregated_bookings
-- Occupancy percentage
select format(sum(successful_bookings)/sum(capacity) * 100,0) as Occpancy from (select distinct * from hostel_rooms.fact_aggregated_bookings) t1

-- Revenue Split by City
-- How much Revenue a certain is generating
select city,format(sum(revenue_realized),0) as  Total_Revenue from
(select dh.city,fb.revenue_realized from hostel_rooms.fact_bookings fb inner join hostel_rooms.dim_hotels dh on dh.property_id=fb.property_id
--  inner join hostel_rooms.dim_rooms dr on dr.room_id=fb.room_category
)t1 group by city order by 2 desc

-- Check Revenue by year but we have only 2022 as year 
select Date,format(sum(revenue_realized),0) as Revenue from (select  year(DATE(CHECK_in_date)) as Date,revenue_realized from hostel_rooms.fact_bookings) t1 group by Date

-- Split by city but then refine them in a certain sub category
select distinct room_category from hostel_rooms.fact_bookings  -- so four of them not possible incase of our bar plot

-- lets split them using room category like standatd elite premium etc
select city,room_class,format(sum(revenue_realized),0) as Revenue  from (select  city,room_class,category,revenue_realized from hostel_rooms.fact_bookings fb
inner join hostel_rooms.dim_rooms dr  on fb.room_category=dr.room_id inner join hostel_rooms.dim_hotels dh on dh.property_id=fb.property_id
)t1 group by city,room_class

-- show trend of average rating and occupancy in property by each month
select * from hostel_rooms.dim_date
inner join hostel_rooms. fb on fb.


-- create temporary tables to get percentage change and revenue 
drop temporary table hostel_rooms.temp_fact_bookings
drop temporary table hostel_rooms.temp_dim_date
create temporary table hostel_rooms.temp_dim_date
-- select *  from (select `week no` as Week_Number,`dd-MMMM-yyyy` as Month_Year,date as Date_ from hostel_rooms.dim_date) t1
select `week no` as Week_Number,date(date_format(str_to_date(`date`,'%d-%b-%y'),'%y-%m-%d')) as Date_ ,`mmm yy` as Month_Year ,day_type from hostel_rooms.dim_date
create temporary table hostel_rooms.temp_fact_bookings
select *,date(booking_date) as Bk_date,date(check_in_date)  as check_in from hostel_rooms.fact_bookings



-- this query tells amount of revenue in all months and also use percentage change formula for each month
-- Total Revenue generated by each month
with cte_check_diff(Month_name,Total_Revenue,diff)
as  (select Month_name,Total_Revenue,ifnull(lag(total_revenue,1) over(),0)  as diff from 
(select month_name,sum(revenue_realized) as Total_Revenue  from  (select *,monthname(tfb.Bk_Date)  as Month_name from hostel_rooms.temp_fact_bookings tfb
inner join hostel_rooms.temp_dim_date tdd on tdd.Date_=tfb.check_in_date) line_plt group by Month_name )x2)
-- change in revenue from one month to another like how much is the percentage of increase and decrease
select Month_name,format(Total_Revenue,0) as Revenue,concat(format(ifnull(((Total_Revenue-diff)/diff )* 100,0),2),'%')  as Percentage_Change from cte_check_diff


-- there is a need to change date format in mysql 
															--  Fact Aggregated Bookings
drop temporary table hostel_rooms.temp_fact_aggregated_bookings
create temporary table hostel_rooms.temp_fact_aggregated_bookings
select *,str_to_Date(check_in_date,'%d-%b-%y') as check_in from hostel_rooms.fact_aggregated_bookings


-- Average Occupancy by Week

-- select * from hostel_rooms.temp_fact_bookings tfb
-- inner join hostel_rooms.temp_fact_aggregated_bookings tfab on tfb.check_in=tfab.check_in and tfb.property_id=tfab.property_id
select Week_Number,avg(Occupancy) as Average_Occupancy_per_week from
 (select *,successful_bookings/capacity as Occupancy from (select Week_Number,successful_bookings,capacity from hostel_rooms.temp_fact_aggregated_bookings tfab
inner join hostel_rooms.temp_dim_date tdd on tdd.Date_=tfab.check_in) t1)t2 group by Week_Number


-- Average rating per week
select week_number,format(avg(ratings_given),3) as Average_Rating 
from (select week_number,ratings_given from hostel_rooms.temp_fact_bookings tfb
inner join hostel_rooms.temp_dim_Date tdd on tfb.check_in=tdd.Date_ )t1 group by week_number

-- Questions--> why the average rating is so low for weeks.The rating is out of 5.

-- show hotels by property_id,city,revenue,occupancy,average rating,cancellation rate
drop temporary table hostel_rooms.t1
create temporary table hostel_rooms.t1 select property_id,city,Revenue,format(Average_Ratings,2) as Average_rating,cr/cf*100 as Cancellation_Rate 
from (select property_id,city,sum(revenue_realized) as Revenue,avg(ratings_given) as Average_Ratings,count(cancel_) as cr,count(Rows_) as cf from
(select *,case  when booking_status='Cancelled' then 1 else null end as Cancel_, row_number() over() as Rows_ -- row_number() over (partition by property_id)  
from (select fb.property_id,city,revenue_realized,booking_status,ratings_given from hostel_rooms.fact_bookings fb inner join  hostel_rooms.dim_hotels dh on 
fb.property_id=dh.property_id )t1)t2 group by property_id,city)t3
drop temporary table hostel_rooms.t2
create temporary table hostel_rooms.t2 select property_id,avg(Occupancy) as 'Occupancy%' from  (select property_id,successful_bookings/capacity*100  as Occupancy 
from hostel_rooms.temp_fact_aggregated_bookings) t1 group by property_id  select * from hostel_rooms.t1 x1 inner join hostel_rooms.t2 x2 
on x2.property_id=x1.property_id order by city desc


-- Booking percentage by platforms
select if(grouping(booking_platform),'Total',booking_platform) as Booking_platform
,sum(revenue) as Revenue,sum(Total_percentage)  as Total_percentage 
from
(select booking_platform,revenue,revenue/total_revenue*100 as Total_percentage from
(select booking_platform,revenue,sum(revenue) over() as Total_Revenue from 
(select booking_platform,sum(revenue_realized) as Revenue  from hostel_rooms.fact_bookings
group by booking_platform)t1)t2)t3
group by booking_platform with rollup

-- Occupancy by day type
select day_type,avg(occ)*100 as 'Occupancy%'
from
(select day_type,successful_bookings,capacity,successful_bookings/capacity as occ from hostel_rooms.temp_fact_aggregated_bookings tfab
inner join  hostel_rooms.temp_dim_date tdd on tdd.Date_=tfab.check_in
) t1
group by day_type
-- occupancy --> Ratio of total successful bookings to total capacity

/*-- sales in each month
select Month_name,revenue,lag(revenue) over() from (select Month_name,sum(revenue_realized) as Revenue from
(select * from (select *,date(date_format(str_to_date(`date`,'%d-%b-%y'),'%y-%m-%d')) as Date_ ,
substring(`mmm yy`,1,position(" " in `mmm yy`)) as Month_name from hostel_rooms.dim_date dd) t1
inner join hostel_rooms.fact_bookings fb on fb.check_in_date=t1.Date_)t2
group by Month_name)t3
*/

select sum(Revenue) from 
(select room_class,sum(revenue_realized)  as Revenue from 
(select * from hostel_rooms.dim_rooms dr
inner join hostel_rooms.fact_bookings fb on dr.room_id=fb.room_category
) t1
group by room_class
)t2 -- so you can generate that revenue for standard and etc class but why its not performing for me in the dax query

